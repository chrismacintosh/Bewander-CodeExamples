//Here's a WebAPI2 example that worked with bewander data to return the newest written review.

public IHttpActionResult Get()
        {
            var newestReview = db.Reviews.OrderByDescending(t => t.DatePosted).FirstOrDefault();
            User user = db.Users.Find(newestReview.UserID);
            string fullname = user.FirstName + " " + user.LastName;
            string webUrl = "http://bewander.com/Reviews/DisplayReviews?PlaceID=" + newestReview.PlaceID;
            var placeinfo = db.Places.Find(newestReview.PlaceID);
            ReviewAPIViewModel review = new ReviewAPIViewModel { PlaceName = placeinfo.Name, Website = webUrl, CostRating = newestReview.CostRating, StarRating = newestReview.StarRating, ReviewID = newestReview.ReviewID, Title = newestReview.Title, Body = newestReview.Body, DatePosted = newestReview.DatePosted, UsersFullName = fullname, ResidentType = (int)newestReview.ResidentType, SubjectType = (int)newestReview.Subject };
            string jsonString = JsonConvert.SerializeObject(review);
            return Ok(jsonString);
        }
       
//here's a updated version that parsed the request and returned an image of the user who wrote the newest review, or the review info depending on the request

class FileResult : IHttpActionResult
        {
            private readonly string _filePath;
            private readonly string _contentType;
            public FileResult(string filePath, string contentType = null)
            {
                if (filePath == null) throw new ArgumentNullException("filePath");
                _filePath = filePath;
                _contentType = contentType;
            }
            public Task<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken)
            {
                var response = new HttpResponseMessage(HttpStatusCode.OK)
                {
                    Content = new StreamContent(System.IO.File.OpenRead(_filePath))
                };
                var contentType = _contentType ?? MimeMapping.GetMimeMapping(Path.GetExtension(_filePath));
                response.Content.Headers.ContentType = new MediaTypeHeaderValue(contentType);
                return Task.FromResult(response);
            }
        }
        public IHttpActionResult Get(string id)
        {
            var newestReview = db.Reviews.OrderByDescending(t => t.DatePosted).FirstOrDefault();
            User user = db.Users.Find(newestReview.UserID);
            if (id == "newestreview")
            {
                string fullname = user.FirstName + " " + user.LastName;
                string webUrl = "http://bewander.com/Reviews/DisplayReviews?PlaceID=" + newestReview.PlaceID;
                string jsonString = JsonConvert.SerializeObject(review);
                return Ok(jsonString);
            }
            else if(id == "newestreviewphoto")
            {
                Image image = Image.GetProfileImages(user.UserID, FileType.ProfilePicture);
                string fileName = HostingEnvironment.MapPath(@"~\Images\" + newestReview.UserID + @"\" + image.Path);
                
                var fileInfo = new FileInfo(fileName);
                return !fileInfo.Exists ? (IHttpActionResult) NotFound() : new FileResult(fileInfo.FullName);
            }
            else { return Ok("Houston, we have a problem."); }
        }
    }
